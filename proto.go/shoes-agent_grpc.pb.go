// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shoesagent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShoesAgentClient is the client API for ShoesAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoesAgentClient interface {
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error)
	StartRunner(ctx context.Context, in *StartRunnerRequest, opts ...grpc.CallOption) (*StartRunnerResponse, error)
}

type shoesAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewShoesAgentClient(cc grpc.ClientConnInterface) ShoesAgentClient {
	return &shoesAgentClient{cc}
}

func (c *shoesAgentClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*GetAgentStatusResponse, error) {
	out := new(GetAgentStatusResponse)
	err := c.cc.Invoke(ctx, "/shoesagent.ShoesAgent/GetAgentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoesAgentClient) StartRunner(ctx context.Context, in *StartRunnerRequest, opts ...grpc.CallOption) (*StartRunnerResponse, error) {
	out := new(StartRunnerResponse)
	err := c.cc.Invoke(ctx, "/shoesagent.ShoesAgent/StartRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoesAgentServer is the server API for ShoesAgent service.
// All implementations must embed UnimplementedShoesAgentServer
// for forward compatibility
type ShoesAgentServer interface {
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error)
	StartRunner(context.Context, *StartRunnerRequest) (*StartRunnerResponse, error)
	mustEmbedUnimplementedShoesAgentServer()
}

// UnimplementedShoesAgentServer must be embedded to have forward compatible implementations.
type UnimplementedShoesAgentServer struct {
}

func (UnimplementedShoesAgentServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*GetAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedShoesAgentServer) StartRunner(context.Context, *StartRunnerRequest) (*StartRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRunner not implemented")
}
func (UnimplementedShoesAgentServer) mustEmbedUnimplementedShoesAgentServer() {}

// UnsafeShoesAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoesAgentServer will
// result in compilation errors.
type UnsafeShoesAgentServer interface {
	mustEmbedUnimplementedShoesAgentServer()
}

func RegisterShoesAgentServer(s grpc.ServiceRegistrar, srv ShoesAgentServer) {
	s.RegisterService(&ShoesAgent_ServiceDesc, srv)
}

func _ShoesAgent_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoesAgentServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoesagent.ShoesAgent/GetAgentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoesAgentServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoesAgent_StartRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoesAgentServer).StartRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoesagent.ShoesAgent/StartRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoesAgentServer).StartRunner(ctx, req.(*StartRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoesAgent_ServiceDesc is the grpc.ServiceDesc for ShoesAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoesAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shoesagent.ShoesAgent",
	HandlerType: (*ShoesAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentStatus",
			Handler:    _ShoesAgent_GetAgentStatus_Handler,
		},
		{
			MethodName: "StartRunner",
			Handler:    _ShoesAgent_StartRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shoes-agent.proto",
}
